{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#cookiecutter-netbox-plugin","title":"Cookiecutter NetBox Plugin","text":"<p>Cookiecutter template for a NetBox plugin, built with popular develop tools and conform to best practice.</p> <ul> <li>Documentation: https://netbox-community.github.io/cookiecutter-netbox-plugin/</li> </ul> <p>Note: Plugins from this version target NetBox 4.0+</p>"},{"location":"#features","title":"Features","text":"<p>This tool will create Python project with the following features:</p> <ul> <li>Mkdocs: Writing your docs in markdown style</li> <li>Format with Black and Isort</li> <li>Lint code with Flake8 and Flake8-docstrings</li> <li>Pre-commit hooks: Formatting/linting anytime when commit your code</li> <li>Mkdocstrings: Auto API doc generation</li> <li>Continuous Integration/Deployment by GitHub actions, includes:<ul> <li>publish documents automatically when CI success</li> <li>extract changelog from CHANGELOG and integrate with release notes automatically</li> </ul> </li> <li>Host your documentation from GitHub Pages with zero-config</li> </ul>"},{"location":"#quickstart","title":"Quickstart","text":"<p>Install the latest Cookiecutter if you haven't installed it yet (this requires Cookiecutter 1.4.0 or higher):</p> <pre><code>pip install -U cookiecutter\n</code></pre> <p>Generate a Python package project:</p> <pre><code>cookiecutter https://github.com/netbox-community/cookiecutter-netbox-plugin.git\n</code></pre> <p>Then follow Tutorial to finish other configurations.</p>"},{"location":"history/","title":"History","text":""},{"location":"history/#history","title":"History","text":""},{"location":"history/#v020","title":"v0.2.0","text":"<ul> <li>Updates to target NetBox 4.0</li> </ul>"},{"location":"history/#v010","title":"v0.1.0","text":"<p>first (Beta) release with the following features:</p> <ul> <li>Mkdocs: Writing your docs in markdown style</li> <li>Format with Black and Isort</li> <li>Lint code with Flake8 and Flake8-docstrings</li> <li>Pre-commit hooks: Formatting/linting anytime when commit your code</li> <li>Mkdocstrings: Auto API doc generation</li> <li>Continuous Integration/Deployment by GitHub actions, includes:<ul> <li>publish documents automatically when CI success</li> <li>extract changelog from CHANGELOG and integrate with release notes automatically</li> </ul> </li> <li>Host your documentation from GitHub Pages with zero-config</li> </ul>"},{"location":"prompts/","title":"Prompts","text":""},{"location":"prompts/#prompts","title":"Prompts","text":"<p>When you create a package, you are prompted to enter these values.</p>"},{"location":"prompts/#templated-values","title":"Templated Values","text":"<p>The following appear in various parts of your generated project.</p>"},{"location":"prompts/#templated-values_1","title":"Templated Values","text":"<p>The following appear in various parts of your generated project.</p> plugin_name The base name of your plugin (without \"NetBox\" or \"Plugin\").  This is used to initialize most of the other settings. project_name The name of your new Python package project. This is used in documentation, so spaces and any characters are fine here. hyphenated The name of your Python package for PyPI, also as the repository name of GitHub. Typically, it is the slugified version of project_name. underscored The name of the python module and directory in the project. project_short_description A 1-sentence description of what your Python package does. full_name Your full name. email Your email address. github_username Your GitHub username (or organization name). version The starting version number of the package."},{"location":"prompts/#options","title":"Options","text":"<p>The following package configuration options set up different features for your project.</p> open_source_license Choose a license. Options: [1. Apache-2.0, 2. MIT, 3. BSD, 4. ISC, 5. GPL-3.0-only, 6. Not open source] <p>except above settings, for CI/CD, you'll also need configure gitub repsitory secrets at page repo &gt; settings &gt; secrtes, and add the following secrets:</p> <ul> <li>PERSONAL_TOKEN (required for publishing document to git pages)</li> <li>TEST_PYPI_API_TOKEN (required for publishing dev release to testpypi)</li> <li>PYPI_API_TOKEN (required for publish )</li> </ul>"},{"location":"pypi_release_checklist/","title":"Release checklist","text":""},{"location":"pypi_release_checklist/#pypi-release-checklist","title":"PyPI Release Checklist","text":""},{"location":"pypi_release_checklist/#before-your-first-release","title":"Before Your First Release","text":"<p>You better visit PyPI to make sure your package name is unused.</p>"},{"location":"pypi_release_checklist/#for-every-release","title":"For Every Release","text":"<ol> <li> <p>Make some pull requests, merge all changes from feature branch to master/main.</p> </li> <li> <p>Update CHANGELOG.md manually. Make sure it follows the Keep a Changelog standard.     Be noticed that GitHub workflow will read changelog and extract release notes automatically.</p> </li> <li> <p>Commit the changelog changes:</p> <pre><code>git add CHANGELOG.md\ngit commit -m \"Changelog for upcoming release 0.1.1.\"\n</code></pre> </li> <li> <p>Update version number.</p> </li> <li> <p>Push these commits to master/main:</p> <pre><code>git push\n</code></pre> <p>Before proceeding to the next step, please check workflows triggered by this push have passed.</p> </li> <li> <p>Create and push the tag to master/main, creating the new release on both GitHub and PyPI:</p> <p>Only tag name started with 'v'(lower case) will leverage GitHub release workflow.</p> </li> <li> <p>Check the PyPI listing page to make sure that the README, release     notes, and roadmap display properly.</p> </li> </ol>"},{"location":"tutorial/","title":"Tutorial","text":""},{"location":"tutorial/#tutorial","title":"Tutorial","text":"<p>To start with, you will need GitHub, PyPI and TestPyPI. If you don't have one, please follow the links to apply one before you get started on this tutorial.</p> <p>If you are new to Git and GitHub, you should probably spend a few minutes on some tutorials at the top of the page at GitHub Help.</p> <p>You will also need an installation of NetBox to configure and test the plugin. More information on Plugin Development can be found in the NetBox documentation Plugin Development.</p>"},{"location":"tutorial/#step-1-install-cookiecutter","title":"Step 1: Install Cookiecutter","text":"<p>Install cookiecutter:</p> <pre><code>pip install cookiecutter\n</code></pre>"},{"location":"tutorial/#step-2-generate-your-package","title":"Step 2: Generate Your Package","text":"<p>Now it's time to generate your Python package.</p> <p>Run the following command and feed with answers, If you don\u2019t know what to enter, stick with the defaults:</p> <pre><code>cookiecutter https://github.com/netbox-community/cookiecutter-netbox-plugin.git\n</code></pre> <p>Finally, a new folder will be created under current folder, the name is the answer you provided to <code>hyphenated</code>.</p> <p>Go to this generated folder, the project layout should look like:</p> <pre><code>.\n\u251c\u2500\u2500 CHANGELOG.md\n\u251c\u2500\u2500 CONTRIBUTING.md\n\u251c\u2500\u2500 docs\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 changelog.md\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 contributing.md\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 index.md\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 Makefile\n\u251c\u2500\u2500 MANIFEST.in\n\u251c\u2500\u2500 mkdocs.yml\n\u251c\u2500\u2500 netbox_healthcheck_plugin\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 filtersets.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 forms.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 models.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 navigation.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 tables.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 templates\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 netbox_healthcheck_plugin\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 healthcheck.html\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 urls.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 views.py\n\u251c\u2500\u2500 pyproject.toml\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 requirements_dev.txt\n\u2514\u2500\u2500 tests\n    \u251c\u2500\u2500 __init__.py\n    \u2514\u2500\u2500 test_netbox_healthcheck_plugin.py\n</code></pre> <p>Here the plugin_name is <code>HealthCheck</code>, when you generate yours, it could be other name.</p>"},{"location":"tutorial/#step-3-development-installation","title":"Step 3: Development Installation","text":"<p>Go to your NetBox development environment and make sure the NetBox virtual environment is active.  See Create Python Virtual Environment.</p> <p>To ease development, it is recommended to go ahead and install the plugin in editable mode (i.e setuptools' develop mode). Call pip from the plugin's root directory with the <code>-e</code> flag:</p> <pre><code>$ pip install -e .\n</code></pre>"},{"location":"tutorial/#step-4-configure-netbox","title":"Step 4: Configure NetBox","text":"<p>To enable the plugin in NetBox, add it to the <code>PLUGINS</code> parameter in <code>configuration.py</code>:</p> <p><pre><code>PLUGINS = [\n    'healthcheck',\n]\n</code></pre> At this point you can run tests and make sure everything is working properly.</p>"},{"location":"tutorial/#step-5-create-a-github-repo","title":"Step 5: Create a GitHub Repo","text":"<p>Go to your GitHub account and create a new repo named <code>netbox-healthcheck-plugin</code>, where <code>netbox-healthcheck-plugin</code> matches the <code>hyphenated</code> from your answers to running cookiecutter.</p> <p>Then go to repo &gt; settings &gt; secrets, click on 'New repository secret', add the following  secrets:</p> <ul> <li>TEST_PYPI_API_TOKEN, see How to apply TestPyPI token</li> <li>PYPI_API_TOKEN, see How to apply pypi token</li> <li>PERSONAL_TOKEN, see How to apply personal token</li> </ul>"},{"location":"tutorial/#step-6-upload-code-to-github","title":"Step 6: Upload code to GitHub","text":"<p>Back to your develop environment, find the folder named after the <code>hyphenated</code>. Move into this folder, and then setup git to use your GitHub repo and upload the code:</p> <pre><code>cd my-package\n\ngit add .\ngit commit -m \"Initial commit.\"\ngit branch -M main\ngit remote add origin git@github.com:myusername/my-package.git\ngit push -u origin main\n</code></pre> <p>Where <code>myusername</code> and <code>my-package</code> are adjusted for your username and repo name.</p> <p>You'll need a ssh key to push the repo. You can Generate a key or Add an existing one.</p> Warning <p>if you answered 'yes' to the question if install pre-commit hooks at last step, then you should find pre-commit be invoked when you run <code>git commit</code>, and some files  may be modified by hooks. If so, please add these files and commit again.</p>"},{"location":"tutorial/#check-result","title":"Check result","text":"<p>After pushing your code to GitHub, goto GitHub web page, navigate to your repo, then click on actions link, you should find screen like this:</p> <p></p> <p>There should be some workflows running. After they finished, go to [TestPyPI], check if a new artifact is published under the name <code>hyphenated</code>.</p>"},{"location":"tutorial/#step-7-check-documentation","title":"Step 7. Check documentation","text":"<p>Documentation will be published and available at https://{your_github_account}.github.io/{your_repo} You will need to make sure GitHub is configured properly:</p> <ol> <li>Your repro must be public</li> <li>On the main top horizontal menu go to \"Settings\"</li> <li>On the left-hand menu go to \"Pages\"</li> <li>Under \"Build and deployment\" make sure Source dropdown is set to \"Deploy from a branch\"</li> <li>Under branch choose \"gh-pages\" and \"/(root)\" - click the Save button</li> </ol> <p>You may need to wait up to 10 minutes for your documentation to appear.  If you are still having issues you can manually deploy it by the following steps:</p> <ol> <li>Make sure a local virtual environment is configured.</li> <li>Pip install the following pakcages:</li> </ol> <p><pre><code>pip install mkdocs-material mkdocs-autorefs mkdocs-material-extensions mkdocstrings mkdocstrings-python-legacy mkdocs-include-markdown-plugin\n</code></pre> 3. run the following command:</p> <pre><code>mkdocs gh-deploy\n</code></pre> <p>Documentation updates will be published once:</p> <ol> <li>the commit is tagged, and the tag name is started with 'v' (lower case)</li> <li>build/testing executed by GitHub CI passed</li> </ol>"},{"location":"tutorial/#step-8-make-official-release","title":"Step 8. Make official release","text":"<p>After done with your phased development in a feature branch, make a pull request, following   instructions at release checklist, trigger first official release and check   result at [PyPI].</p>"},{"location":"tutorial/#configuring-trusted-publishing","title":"Configuring trusted publishing","text":"<p>This guide relies on PyPI's trusted publishing implementation to connect to GitHub Actions CI/CD. This is recommended for security reasons, since the generated tokens are created for each of your projects individually and expire automatically. Otherwise, you'll need to generate an API token for both PyPI and TestPyPI. In case of publishing to third-party indexes like <code>devpi &lt;devpi:index&gt;</code>, you may need to provide a username/password combination.</p> <p>Since this guide will demonstrate uploading to both PyPI and TestPyPI, we'll need two trusted publishers configured. The following steps will lead you through creating the \"pending\" publishers for your new :term:<code>PyPI project &lt;Project&gt;</code>. However it is also possible to add trusted publishing to any pre-existing project, if you are its owner.</p> <p>.. attention::</p> <p>If you followed earlier versions of this guide, you    have created the secrets <code>PYPI_API_TOKEN</code> and <code>TEST_PYPI_API_TOKEN</code>    for direct PyPI and TestPyPI access. These are obsolete now and    you should remove them from your GitHub repository and revoke    them in your PyPI and TestPyPI account settings in case you are replacing your old setup with the new one.</p> <p>Let's begin! \ud83d\ude80</p> <ol> <li>Go to https://pypi.org/manage/account/publishing/.</li> <li>Fill in the name you wish to publish your new    <code>PyPI project &lt;Project&gt;</code> under    (the <code>name</code> value in your <code>setup.cfg</code> or <code>pyproject.toml</code>),    the GitHub repository owner's name (org or user),    and repository name, and the name of the release workflow file under    the <code>.github/</code> folder, see <code>workflow-definition</code>.    Finally, add the name of the GitHub Environment    (<code>pypi</code>) we're going set up under your repository.    Register the trusted publisher.</li> <li>Now, go to https://test.pypi.org/manage/account/publishing/ and repeat    the second step, but this time, enter <code>testpypi</code> as the name of the    GitHub Environment.</li> <li>Your \"pending\" publishers are now ready for their first use and will    create your projects automatically once you use them    for the first time.</li> </ol> <p>Note</p> <p>If you don't have a TestPyPI account, you'll need to create it. It's not the same as a regular PyPI account.</p> <p>Warning</p> <p>For security reasons, you must require <code>manual approval &lt;https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment#deployment-protection-rules&gt;</code>_ on each run for the <code>pypi</code> environment.</p>"},{"location":"tutorial/#step-9-optional-submit-it-to-netboxdev","title":"Step 9. (Optional) Submit it to netbox.dev","text":"<p>If your plugin is public, submit it to NetBox.dev Plugin Repository for easy discovery by other NetBox users.</p> Note <p>Did you find anything in this article confusing? Please Edit this file and create a pull a request!</p>"}]}